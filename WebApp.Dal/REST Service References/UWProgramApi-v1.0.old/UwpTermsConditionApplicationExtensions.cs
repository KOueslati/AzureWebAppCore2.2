// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UwpTermsConditionApplication.
    /// </summary>
    public static partial class UwpTermsConditionApplicationExtensions
    {
            /// <summary>
            /// Razs the pricing results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            public static object RazPricingResults(this IUwpTermsConditionApplication operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwpTermsConditionApplication)s).RazPricingResultsAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Razs the pricing results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> RazPricingResultsAsync(this IUwpTermsConditionApplication operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RazPricingResultsWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Does apply the specific terms and conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// The programId.
            /// </param>
            public static object DoApplySpecificTandC(this IUwpTermsConditionApplication operations, int programid)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwpTermsConditionApplication)s).DoApplySpecificTandCAsync(programid), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Does apply the specific terms and conditions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// The programId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DoApplySpecificTandCAsync(this IUwpTermsConditionApplication operations, int programid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DoApplySpecificTandCWithHttpMessagesAsync(programid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Merge and format data to call pricing routine for an underwriting program.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            public static object DoFormatAndCallPricingForProgram(this IUwpTermsConditionApplication operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwpTermsConditionApplication)s).DoFormatAndCallPricingForProgramAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Merge and format data to call pricing routine for an underwriting program.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DoFormatAndCallPricingForProgramAsync(this IUwpTermsConditionApplication operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DoFormatAndCallPricingForProgramWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the pricing results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// The programid.
            /// </param>
            public static object GetPricingResults(this IUwpTermsConditionApplication operations, int programid)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwpTermsConditionApplication)s).GetPricingResultsAsync(programid), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the pricing results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// The programid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetPricingResultsAsync(this IUwpTermsConditionApplication operations, int programid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPricingResultsWithHttpMessagesAsync(programid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get  the specific terms and conditions result rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='skip'>
            /// The skip.
            /// </param>
            /// <param name='top'>
            /// The top.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='orderby'>
            /// The orderby.
            /// </param>
            /// <param name='filter'>
            /// The filter.
            /// </param>
            public static object GetSpecificTandCResults(this IUwpTermsConditionApplication operations, int programId, int? skip = default(int?), int? top = default(int?), bool? count = default(bool?), string orderby = default(string), string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwpTermsConditionApplication)s).GetSpecificTandCResultsAsync(programId, skip, top, count, orderby, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get  the specific terms and conditions result rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='skip'>
            /// The skip.
            /// </param>
            /// <param name='top'>
            /// The top.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='orderby'>
            /// The orderby.
            /// </param>
            /// <param name='filter'>
            /// The filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetSpecificTandCResultsAsync(this IUwpTermsConditionApplication operations, int programId, int? skip = default(int?), int? top = default(int?), bool? count = default(bool?), string orderby = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSpecificTandCResultsWithHttpMessagesAsync(programId, skip, top, count, orderby, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
