// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UwCluster.
    /// </summary>
    public static partial class UwClusterExtensions
    {
            /// <summary>
            /// Get a set of clusters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            public static object GetClustersByUwProgramId(this IUwCluster operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwCluster)s).GetClustersByUwProgramIdAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a set of clusters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetClustersByUwProgramIdAsync(this IUwCluster operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetClustersByUwProgramIdWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cluster'>
            /// The cluster to update.
            /// </param>
            public static ApiError UpdateCluster(this IUwCluster operations, int programId, ClusterDto cluster)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwCluster)s).UpdateClusterAsync(programId, cluster), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cluster'>
            /// The cluster to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> UpdateClusterAsync(this IUwCluster operations, int programId, ClusterDto cluster, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateClusterWithHttpMessagesAsync(programId, cluster, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cluster'>
            /// The cluster to create.
            /// </param>
            public static object CreateCluster(this IUwCluster operations, int programId, ClusterDto cluster)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwCluster)s).CreateClusterAsync(programId, cluster), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The underwriting program identifier.
            /// </param>
            /// <param name='cluster'>
            /// The cluster to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CreateClusterAsync(this IUwCluster operations, int programId, ClusterDto cluster, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateClusterWithHttpMessagesAsync(programId, cluster, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a cluster by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='clusterId'>
            /// The cluster identifier.
            /// </param>
            public static object GetClusterById(this IUwCluster operations, int programId, int clusterId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwCluster)s).GetClusterByIdAsync(programId, clusterId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a cluster by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='clusterId'>
            /// The cluster identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetClusterByIdAsync(this IUwCluster operations, int programId, int clusterId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetClusterByIdWithHttpMessagesAsync(programId, clusterId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the program.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='clusterId'>
            /// The program identifier.
            /// </param>
            public static ApiError DeleteCluster(this IUwCluster operations, int programId, int clusterId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwCluster)s).DeleteClusterAsync(programId, clusterId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the program.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='clusterId'>
            /// The program identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> DeleteClusterAsync(this IUwCluster operations, int programId, int clusterId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteClusterWithHttpMessagesAsync(programId, clusterId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
