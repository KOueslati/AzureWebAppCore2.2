// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UwProgramTermConditionSpecific.
    /// </summary>
    public static partial class UwProgramTermConditionSpecificExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static object GetAllTermConditionsSpecific(this IUwProgramTermConditionSpecific operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermConditionSpecific)s).GetAllTermConditionsSpecificAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAllTermConditionsSpecificAsync(this IUwProgramTermConditionSpecific operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAllTermConditionsSpecificWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='dto'>
            /// </param>
            public static object CreateOrUpdate(this IUwProgramTermConditionSpecific operations, int programId, TermsConditionsSpecificRootDto dto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermConditionSpecific)s).CreateOrUpdateAsync(programId, dto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='dto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CreateOrUpdateAsync(this IUwProgramTermConditionSpecific operations, int programId, TermsConditionsSpecificRootDto dto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(programId, dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='termConditionSpecificId'>
            /// </param>
            public static object GetTermConditionsSpecific(this IUwProgramTermConditionSpecific operations, int programId, int termConditionSpecificId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermConditionSpecific)s).GetTermConditionsSpecificAsync(programId, termConditionSpecificId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='termConditionSpecificId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetTermConditionsSpecificAsync(this IUwProgramTermConditionSpecific operations, int programId, int termConditionSpecificId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTermConditionsSpecificWithHttpMessagesAsync(programId, termConditionSpecificId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='termConditionSpecificId'>
            /// </param>
            public static object DeleteTermConditionsSpecific(this IUwProgramTermConditionSpecific operations, int programId, int termConditionSpecificId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermConditionSpecific)s).DeleteTermConditionsSpecificAsync(programId, termConditionSpecificId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='termConditionSpecificId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteTermConditionsSpecificAsync(this IUwProgramTermConditionSpecific operations, int programId, int termConditionSpecificId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteTermConditionsSpecificWithHttpMessagesAsync(programId, termConditionSpecificId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
