// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UWProgramRiskObject.
    /// </summary>
    public static partial class UWProgramRiskObjectExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static object GetAllDesiredUWProgramsRiskObjects(this IUWProgramRiskObject operations, int programid, int? skip = default(int?), int? top = default(int?), bool? count = default(bool?), string orderby = default(string), string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).GetAllDesiredUWProgramsRiskObjectsAsync(programid, skip, top, count, orderby, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='orderby'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAllDesiredUWProgramsRiskObjectsAsync(this IUWProgramRiskObject operations, int programid, int? skip = default(int?), int? top = default(int?), bool? count = default(bool?), string orderby = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAllDesiredUWProgramsRiskObjectsWithHttpMessagesAsync(programid, skip, top, count, orderby, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='programRiskObjectDto'>
            /// </param>
            public static ApiError UpdateProgramRiskObject(this IUWProgramRiskObject operations, int programid, ProgramRiskObjectDto programRiskObjectDto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).UpdateProgramRiskObjectAsync(programid, programRiskObjectDto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='programRiskObjectDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> UpdateProgramRiskObjectAsync(this IUWProgramRiskObject operations, int programid, ProgramRiskObjectDto programRiskObjectDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateProgramRiskObjectWithHttpMessagesAsync(programid, programRiskObjectDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='programRiskObjectDto'>
            /// </param>
            public static object CreateProgramRiskObject(this IUWProgramRiskObject operations, int programid, ProgramRiskObjectDto programRiskObjectDto)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).CreateProgramRiskObjectAsync(programid, programRiskObjectDto), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='programRiskObjectDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CreateProgramRiskObjectAsync(this IUWProgramRiskObject operations, int programid, ProgramRiskObjectDto programRiskObjectDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateProgramRiskObjectWithHttpMessagesAsync(programid, programRiskObjectDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static ApiError DeleteRiskObjects(this IUWProgramRiskObject operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).DeleteRiskObjectsAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> DeleteRiskObjectsAsync(this IUWProgramRiskObject operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteRiskObjectsWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='riskobjectid'>
            /// </param>
            public static object GetProgramRiskObjectById(this IUWProgramRiskObject operations, int programid, int riskobjectid)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).GetProgramRiskObjectByIdAsync(programid, riskobjectid), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programid'>
            /// </param>
            /// <param name='riskobjectid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetProgramRiskObjectByIdAsync(this IUWProgramRiskObject operations, int programid, int riskobjectid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetProgramRiskObjectByIdWithHttpMessagesAsync(programid, riskobjectid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='riskobjectId'>
            /// </param>
            public static ApiError DeleteProgramRiskObjectById(this IUWProgramRiskObject operations, int programId, int riskobjectId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramRiskObject)s).DeleteProgramRiskObjectByIdAsync(programId, riskobjectId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='riskobjectId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> DeleteProgramRiskObjectByIdAsync(this IUWProgramRiskObject operations, int programId, int riskobjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteProgramRiskObjectByIdWithHttpMessagesAsync(programId, riskobjectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
