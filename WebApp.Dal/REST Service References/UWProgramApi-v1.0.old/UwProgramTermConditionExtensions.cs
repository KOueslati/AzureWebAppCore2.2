// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UwProgramTermCondition.
    /// </summary>
    public static partial class UwProgramTermConditionExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static object GetPerils(this IUwProgramTermCondition operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).GetPerilsAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetPerilsAsync(this IUwProgramTermCondition operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPerilsWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            public static object Get(this IUwProgramTermCondition operations, int programId, int perilId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).GetAsync(programId, perilId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetAsync(this IUwProgramTermCondition operations, int programId, int perilId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(programId, perilId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ApiError Update(this IUwProgramTermCondition operations, int programId, int perilId, PerilDto model)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).UpdateAsync(programId, perilId, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> UpdateAsync(this IUwProgramTermCondition operations, int programId, int perilId, PerilDto model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(programId, perilId, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            public static object DeleteAsync(this IUwProgramTermCondition operations, int programId, int perilId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).DeleteAsyncAsync(programId, perilId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteAsyncAsync(this IUwProgramTermCondition operations, int programId, int perilId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteAsyncWithHttpMessagesAsync(programId, perilId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='subPerilId'>
            /// </param>
            public static ApiError AddSubPerilAsync(this IUwProgramTermCondition operations, int programId, int perilId, int subPerilId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).AddSubPerilAsyncAsync(programId, perilId, subPerilId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='subPerilId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> AddSubPerilAsyncAsync(this IUwProgramTermCondition operations, int programId, int perilId, int subPerilId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddSubPerilAsyncWithHttpMessagesAsync(programId, perilId, subPerilId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='subPerilId'>
            /// </param>
            public static ApiError DeleteSubPerilAsync(this IUwProgramTermCondition operations, int programId, int perilId, int subPerilId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramTermCondition)s).DeleteSubPerilAsyncAsync(programId, perilId, subPerilId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='perilId'>
            /// </param>
            /// <param name='subPerilId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> DeleteSubPerilAsyncAsync(this IUwProgramTermCondition operations, int programId, int perilId, int subPerilId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteSubPerilAsyncWithHttpMessagesAsync(programId, perilId, subPerilId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
