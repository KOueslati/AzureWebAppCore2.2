// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UwProgramGlobalExpertData.
    /// </summary>
    public static partial class UwProgramGlobalExpertDataExtensions
    {
            /// <summary>
            /// Get layers by program identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static object GetGlobalExpertDataByProgramId(this IUwProgramGlobalExpertData operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramGlobalExpertData)s).GetGlobalExpertDataByProgramIdAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get layers by program identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetGlobalExpertDataByProgramIdAsync(this IUwProgramGlobalExpertData operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetGlobalExpertDataByProgramIdWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// &lt;summary&gt;Update a global expert by global expert data
            /// Identifier&lt;/summary&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='item'>
            /// </param>
            public static object UpdateGlobalExpertData(this IUwProgramGlobalExpertData operations, int programId, GlobalExpertDataDto item)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramGlobalExpertData)s).UpdateGlobalExpertDataAsync(programId, item), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// &lt;summary&gt;Update a global expert by global expert data
            /// Identifier&lt;/summary&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> UpdateGlobalExpertDataAsync(this IUwProgramGlobalExpertData operations, int programId, GlobalExpertDataDto item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateGlobalExpertDataWithHttpMessagesAsync(programId, item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a global expert by programId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='ged'>
            /// The global expert data.
            /// </param>
            public static object CreateGlobalExpertData(this IUwProgramGlobalExpertData operations, int programId, GlobalExpertDataDto ged)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramGlobalExpertData)s).CreateGlobalExpertDataAsync(programId, ged), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a global expert by programId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='ged'>
            /// The global expert data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CreateGlobalExpertDataAsync(this IUwProgramGlobalExpertData operations, int programId, GlobalExpertDataDto ged, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateGlobalExpertDataWithHttpMessagesAsync(programId, ged, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a global expert of an underwriting Identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            public static object DeleteGlobalExpertData(this IUwProgramGlobalExpertData operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUwProgramGlobalExpertData)s).DeleteGlobalExpertDataAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a global expert of an underwriting Identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// The program identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteGlobalExpertDataAsync(this IUwProgramGlobalExpertData operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteGlobalExpertDataWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
