// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for UWProgramLayer.
    /// </summary>
    public static partial class UWProgramLayerExtensions
    {
            /// <summary>
            /// Get layers by program identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static object GetLayers(this IUWProgramLayer operations, int programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramLayer)s).GetLayersAsync(programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get layers by program identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetLayersAsync(this IUWProgramLayer operations, int programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLayersWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='item'>
            /// </param>
            public static object Update(this IUWProgramLayer operations, int programId, LayerDto item)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramLayer)s).UpdateAsync(programId, item), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> UpdateAsync(this IUWProgramLayer operations, int programId, LayerDto item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(programId, item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a layer by programId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='layer'>
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static object CreateLayerById(this IUWProgramLayer operations, LayerDto layer, string programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramLayer)s).CreateLayerByIdAsync(layer, programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a layer by programId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='layer'>
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CreateLayerByIdAsync(this IUWProgramLayer operations, LayerDto layer, string programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateLayerByIdWithHttpMessagesAsync(layer, programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a layer by layer identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='layerId'>
            /// </param>
            /// <param name='programId'>
            /// </param>
            public static ApiError Delete(this IUWProgramLayer operations, int layerId, string programId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUWProgramLayer)s).DeleteAsync(layerId, programId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a layer by layer identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='layerId'>
            /// </param>
            /// <param name='programId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ApiError> DeleteAsync(this IUWProgramLayer operations, int layerId, string programId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(layerId, programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
