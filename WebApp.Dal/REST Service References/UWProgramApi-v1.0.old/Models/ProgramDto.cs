// <autogenerated>By AutoRest</autogenerated>

namespace UWProgramApi.v1_0.Models
{
    using System.Linq;

    public partial class ProgramDto
    {
        /// <summary>
        /// Initializes a new instance of the ProgramDto class.
        /// </summary>
        public ProgramDto() { }

        /// <summary>
        /// Initializes a new instance of the ProgramDto class.
        /// </summary>
        public ProgramDto(int? programId = default(int?), int? businessSubLineId = default(int?), int? businessClassId = default(int?), int? status = default(int?), string underwriterId = default(string), string programPolicyHolderId = default(string), string holdingId = default(string), string brokerId = default(string), int? lobId = default(int?), int? underwritingOfficeId = default(int?), int? igUnderwritingOfficeId = default(int?), int? underwritingYear = default(int?), int? mainActivityId = default(int?), string countryId = default(string), System.DateTime? inceptionDate = default(System.DateTime?), System.DateTime? expiryDate = default(System.DateTime?), string currencyId = default(string), long? turnover = default(long?), int? submissionType = default(int?), int? programPolicyType = default(int?), bool? isInExcessOfDeductible = default(bool?), int? businessType = default(int?), int? businessSegment = default(int?), string creator = default(string), string modifier = default(string), System.DateTime? creationDate = default(System.DateTime?), System.DateTime? modificationDate = default(System.DateTime?), GlobalExpertDataDto globalExpertDataDto = default(GlobalExpertDataDto))
        {
            ProgramId = programId;
            BusinessSubLineId = businessSubLineId;
            BusinessClassId = businessClassId;
            Status = status;
            UnderwriterId = underwriterId;
            ProgramPolicyHolderId = programPolicyHolderId;
            HoldingId = holdingId;
            BrokerId = brokerId;
            LobId = lobId;
            UnderwritingOfficeId = underwritingOfficeId;
            IgUnderwritingOfficeId = igUnderwritingOfficeId;
            UnderwritingYear = underwritingYear;
            MainActivityId = mainActivityId;
            CountryId = countryId;
            InceptionDate = inceptionDate;
            ExpiryDate = expiryDate;
            CurrencyId = currencyId;
            Turnover = turnover;
            SubmissionType = submissionType;
            ProgramPolicyType = programPolicyType;
            IsInExcessOfDeductible = isInExcessOfDeductible;
            BusinessType = businessType;
            BusinessSegment = businessSegment;
            Creator = creator;
            Modifier = modifier;
            CreationDate = creationDate;
            ModificationDate = modificationDate;
            GlobalExpertDataDto = globalExpertDataDto;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ProgramId")]
        public int? ProgramId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BusinessSubLineId")]
        public int? BusinessSubLineId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BusinessClassId")]
        public int? BusinessClassId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Status")]
        public int? Status { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UnderwriterId")]
        public string UnderwriterId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ProgramPolicyHolderId")]
        public string ProgramPolicyHolderId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "HoldingId")]
        public string HoldingId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BrokerId")]
        public string BrokerId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "LobId")]
        public int? LobId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UnderwritingOfficeId")]
        public int? UnderwritingOfficeId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IgUnderwritingOfficeId")]
        public int? IgUnderwritingOfficeId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UnderwritingYear")]
        public int? UnderwritingYear { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "MainActivityId")]
        public int? MainActivityId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CountryId")]
        public string CountryId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "InceptionDate")]
        public System.DateTime? InceptionDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ExpiryDate")]
        public System.DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CurrencyId")]
        public string CurrencyId { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Turnover")]
        public long? Turnover { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SubmissionType")]
        public int? SubmissionType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ProgramPolicyType")]
        public int? ProgramPolicyType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsInExcessOfDeductible")]
        public bool? IsInExcessOfDeductible { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BusinessType")]
        public int? BusinessType { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BusinessSegment")]
        public int? BusinessSegment { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Creator")]
        public string Creator { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Modifier")]
        public string Modifier { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CreationDate")]
        public System.DateTime? CreationDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ModificationDate")]
        public System.DateTime? ModificationDate { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "GlobalExpertDataDto")]
        public GlobalExpertDataDto GlobalExpertDataDto { get; set; }

    }
}
